using System.Text;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;

namespace AmigaDat;

internal class Program
{
    static async Task Main(string[] args)
    {
        Amiga newfile = new Amiga();

        var datfile = @"D:\Emulation\RomVault\DatRoot\Amiga\Amigaoutput.xml";
        var xdocument = XDocument.Load(datfile);
        var xmlserializer = new XmlSerializer(typeof(Amiga));
        var dat = (Amiga?)xmlserializer.Deserialize(xdocument.CreateReader());

        foreach (var machine in dat.Machines)
        {
            foreach (var rom in machine.Roms)
            {
                string pattern = @"(v[1-9\-]+\.[0-9a-zA-Z\-]+|1Disk|2Disk|PreRelease|AGA|CD32|Arcadia|Fast|Chip|PAL|NTSC|CDTV|1MB|512KB|512k|2MB|8MB|NoVoice|NoSpeech|Decrunched|Crunched|NoIntro|NoMovie|Files|Image|CD)";
                Regex regex = new Regex(pattern);
                string newName = rom.Name;
                string description = string.Empty;

                MatchCollection matches = regex.Matches(rom.Name);

                if (matches.Count>0)
                {
                    foreach (Match match in matches)
                    {
                        newName=Regex.Replace(newName, match.Value, $" ({match.Value})");

                        switch (match.Value)
                        {
                            case "AGA":
                            case "CD32":
                            case "Arcadia":
                            case "CDTV":
                                description=match.Value;
                                break;
                        }
                    }
                }

                newName=Regex.Replace(newName, @"([0-9]{4}(\&[0-9]{4})?)?\.lha", "");
                newName=Regex.Replace(newName, "_", "");

                Rom newrom = new()
                {
                    Name=rom.Name,
                    Size=rom.Size,
                    CRC=rom.CRC,
                    MD5=rom.MD5,
                    SHA1=rom.SHA1
                };

                Machine newmachine = new()
                {
                    Name=string.IsNullOrEmpty(description) ? newName : $@"{description}\{newName}",
                    Description=description
                };

                newfile.Header=dat.Header;
                newfile.Header.homepage="https://github.com/lcashton/AmigaDat";
                newfile.Header.comment=$"Generated by AmigaDat - {DateTime.UtcNow}";
                newfile.Header.clrmamepro.forcepacking="zip";

                newmachine.Roms.Add(newrom);
                newfile.Machines.Add(newmachine);
            }
        }

        string filePath = @"D:\Emulation\RomVault\DatRoot\Amiga\Amigaoutput.xml";

        var serializer = new XmlSerializer(typeof(Amiga));

        var namespaces = new XmlSerializerNamespaces();
        namespaces.Add("", "");

        var settings = new XmlWriterSettings
        {
            Indent=true,
            Encoding=new UTF8Encoding(true),
            OmitXmlDeclaration=true
        };

        using (var streamWriter = new StreamWriter(filePath, false, new UTF8Encoding(true)))
        using (var xmlWriter = XmlWriter.Create(streamWriter, settings))
        {
            xmlWriter.WriteRaw("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
            xmlWriter.WriteRaw("<!DOCTYPE datafile PUBLIC \"-//Logiqx//DTD ROM Management Datafile//EN\" \"http://www.logiqx.com/Dats/datafile.dtd\">\n");

            serializer.Serialize(xmlWriter, newfile, namespaces);
        }



        Console.WriteLine("Hello, World!");
    }
}